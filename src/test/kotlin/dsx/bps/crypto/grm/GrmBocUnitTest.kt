package dsx.bps.crypto.grm

import dsx.bps.crypto.grm.datamodel.*
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import java.util.*

internal class GrmBocUnitTest {

    @Test
    @DisplayName("Boc of one cell deserialize test")
    fun bocDeserializeCell() {
        // абвгдеёжзийклмнопрстуфхцчшщъыьэюя in boc
        val hex =
            "B5EE9C72410101010044000084D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F82B68295"
        val result: String = bocDataToText(hexToByteArray(hex))
        Assertions.assertEquals(result, "абвгдеёжзийклмнопрстуфхцчшщъыьэюя")
    }

    @Test
    @DisplayName("Boc of more than one cell deserialize test")
    fun bocDeserializeCells1() {
        // 1абвгдеёжзийклмнопрстуфхцчшщъыьэюя12абвгдеёжзийклмнопрстуфхцчшщъыьэюя23абвгдеёжзийклмнопрстуфхцчшщъыьэюя3 in boc
        val hex =
            "B5EE9C724101020100D10001FE31D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F3132D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18B01009AD18CD18DD18ED18F3233D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F33D9F93235"
        val result: String = bocDataToText(hexToByteArray(hex))
        Assertions.assertEquals(
            result, "1абвгдеёжзийклмнопрстуфхцчшщъыьэюя1" +
                    "2абвгдеёжзийклмнопрстуфхцчшщъыьэюя23абвгдеёжзийклмнопрстуфхцчшщъыьэюя3"
        )
    }

    @Test
    @DisplayName("Boc with data deserialize test")
    fun bocDeserializeCells2() {
        val hex =
            "B5EE9C724102040100015000018AD618165BE9C59257A04672A5FF0DF65BBF7C750C693B53FA30518FAAED984243848AAAA8623872E5207CF9727FDEF007AFA596ED15E67049AEA0909524694C030000000503010168620057478F50F0B34C49688B89A870159606C94CD76541F5599010458510DB12061E2034FBB880000000000000000000000000010201FE31D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F3132D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18B03009AD18CD18DD18ED18F3233D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F33E69941D1"

        val boc: BagOfCells = BagOfCells.deserialize(hexToByteArray(hex))
        val strInBytes: ArrayList<Byte> = arrayListOf()
        val arrayDeque: ArrayDeque<Cell> = ArrayDeque()
        for (rootCell in boc.rootCells) {
            arrayDeque.addFirst(rootCell)

            while (arrayDeque.isNotEmpty()) {
                val cell: Cell = arrayDeque.pop()
                strInBytes.addAll(cell.data.toTypedArray())
                for (ref in cell.references) {
                    arrayDeque.addLast(ref)
                }
            }
        }

        val result: String = byteArrayToHex(strInBytes.toByteArray())

        Assertions.assertEquals(
            result,
            "D618165BE9C59257A04672A5FF0DF65BBF7C750C693B53FA30518FAAED984243848AAAA8623872E5207CF9727FDEF007AFA596ED15E67049AEA0909524694C030000000503620057478F50F0B34C49688B89A870159606C94CD76541F5599010458510DB12061E2034FBB8800000000000000000000000000131D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F3132D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F3233D0B0D0B1D0B2D0B3D0B4D0B5D191D0B6D0B7D0B8D0B9D0BAD0BBD0BCD0BDD0BED0BFD180D181D182D183D184D185D186D187D188D189D18AD18BD18CD18DD18ED18F33"
        )
    }

}